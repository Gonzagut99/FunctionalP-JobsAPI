/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package functionalp.jobsapi;

import java.util.Collection;
import java.util.Collections;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Stream;

import com.beust.jcommander.JCommander;

import static functionalp.jobsapi.CommanderFunctions.buildCommanderWithName;
import static functionalp.jobsapi.api.APIFunctions.buildApi;
import functionalp.jobsapi.api.ApiRickyMorty;
import functionalp.jobsapi.cli.CLIArguments;
import functionalp.jobsapi.cli.CLIFunctions;
import functionalp.jobsapi.dto.CartoonCharacter;
import functionalp.jobsapi.dto.PaginatedCharacters;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        JCommander jCommander = buildCommanderWithName("RicknMorty-API", CLIArguments::newInstance);

        Stream<CLIArguments> streamOfCLI = CommanderFunctions.parseArguments(jCommander, args, JCommander::usage)
            .orElse(Collections.emptyList())
            .stream()
            .map(obj -> (CLIArguments) obj);

        Optional<CLIArguments> cliArgumentsOptional = streamOfCLI
        .filter(cli -> !cli.isHelp())
        .filter(cli-> cli.getKeyword() != null)
        .findFirst();//si no hay tartaremos con un stream vacio

        cliArgumentsOptional.map(CLIFunctions::toMap)
        .map(App::executeRequest)
        .orElse(Stream.empty())
        .forEach(System.out::println);        
    }

    private static Stream<CartoonCharacter> executeRequest(Map<String, Object> params){
        ApiRickyMorty api = buildApi(ApiRickyMorty.class, "https://rickandmortyapi.com/api");

        return Stream.of(params)
        .map(api::characters)
        .map(PaginatedCharacters::getResults)
        .flatMap(Collection::stream);
    }

}
